lab 1:

1.write simple program to print "Hello world" in c++

#include<iostream>
using namespace std;
class Hello{
public:
void hello(){
cout<<"Hello world!"<<endl;
}
};
int main(){
Hello h;
h.hello();
return 0;
}

2.create a class car with
a. data member = speed, cc, color
b. member fuctions = start (), stop(),accerate()

#include<iostream>
using namespace std;
class Car{
public:
float speed;
int cc;
string color;
Car(float s, int c, string col){
speed = s;
cc = c;
color = col;
}
void start(){
cout<<color<< " color car is starting having cc "<<cc<<endl;
}
void accelerate(){
speed+=20;
cout<<"The car is accelerating with speed of "<<speed<<"m/s"<<endl;
}
void stop(){
cout<<"The car has stopped"<<endl;
}
};
int main(){
Car c(0,1500,"Black");
c.start();
c.accelerate();
c.accelerate();
c.stop();
return 0;
}

3.create a class called employee with
a. data member = emp_id , emp_name, emp_salary
b. member function = displaydetails()
note:
data members must be private
initialize data member using parameterized constructor

#include<iostream>
using namespace std;
class Employee{
private:
//data members
int emp_id;
string emp_name;
float emp_salary;
// Parameterized Constructor
public:
Employee(int id, string name, float salary){
emp_id = id;
emp_name = name;
emp_salary = salary;
}
//Member function displaydetails
void displaydetails(){
cout<<"ID of employee:"<<emp_id<<endl;
cout<<"Name of employee:"<<emp_name<<endl;
cout<<"salary of employee:Rs "<<emp_salary<<endl;
}
};
//main function
int main(){
Employee e( 1, "Nirmi", 20000.00);
e.displaydetails();
return 0;
}

4.create a class student with following
a. data members = student_name, student_roll, student_age
b. members functions = getName(), setName(), getAge(),setAge(),
getRoll(),setroll, displaydetails()

#include<iostream>
using namespace std;
class Student{
//data members
public:
string student_name;
int student_roll;
int student_age;
//Member functions setName()-displaydetails()
void setName(string n){
student_name = n;
}
void setRoll(int roll){
student_roll = roll;
}
void setAge(int age){
student_age = age;
}
void displaydetails(){
cout<<"Name = "<<student_name<<endl;
cout<<"Roll no = "<<student_roll<<endl;
cout<<"Age = "<<student_age<<endl;
}
};
//main function
int main(){
Student s;
s.setName("Anahita Dhakal");
s.setRoll(02);
s.setAge(4);
s.displaydetails();
}

5.define a class bank to represent bank account with
a. data members = depositer_name, account_number, account_type(as static)
account_balance
b. member functions = withdrawAmount(),depositAmount()
c. Friend function = displayDetails () to display the details.

#include<iostream>
using namespace std;
class Bank{
private:
string depositer_name;
static string account_type;
double account_balance;
friend void displaydetails(Bank b);
public:
Bank(string name, double balance){
depositer_name = name;
account_balance = balance;
}
void withdrawAmount(double amount){
if(amount>0 && amount <= account_balance){
account_balance-=amount;
cout<<"withdraw successful remaining balance="<< account_balance<<"\n"<<endl;
}
else{
cout<<"insufficient balance\n"<<endl;
}
}
void deposit(double amount){
if( amount>0){
account_balance +=amount;
cout<<"Deposited Rs "<< amount << " Successfully\n"<<endl;
}
else{
cout<<"Please enter valid amount to deposit\n"<<endl;
}
}
};
string Bank::account_type = "Savings";
void displaydetails(Bank b){
cout<<"Depositer name ="<<b.depositer_name<<endl;
cout<<"Account type ="<<Bank::account_type << endl;
cout<<"Account balance = "<<b.account_balance<<"\n"<<endl;
}
int main(){
Bank b(" Rakshyak", 900000);
displaydetails(b);
b.deposit(75000);
b.withdrawAmount(15000);
return 0;
}

Lab 2:

1. Demonstrate unary operator overloading (without friend function)

#include<iostream>
using namespace std;
class Student{
    public:
    int age;
    Student(int a){
        age = a;
    }  
    Student operator++(int){
        age++;
        return Student (age);
    }   
    
};

int main(){
    Student s(15);
    Student s1 = s++;
    cout<<"Age = "<<s.age<<endl;
    return 0;

}


2. Demonstrate unary operator overloading (using friend function)

#include<iostream>
using namespace std;
class Student{
    public:
    int symbol_no;

    Student (int n){
        symbol_no = n;
    }

    friend Student operator++(Student& s);
};
Student operator++ (Student& s){
      ++s.symbol_no;
    return Student(s.symbol_no);
}
int main(){
    Student s(40);
     ++s;
    cout<<"Symbol_no = "<<s.symbol_no<<endl;
    return 0;
}

3. Demonstrate binary operator overloading ( without friend function)

#include<iostream>
using namespace std;
class Student{
    public:
    int age;
    Student (int age){
        this -> age = age;
    }
    Student operator+(Student& s){
        int totalage = age+s.age;
        return Student(totalage);
    }
};

int main(){
    Student s1(30),s2(40); 
    Student s3 = s1+s2;
    int totalage = s3.age;
    cout<<"new age= "<<totalage<<endl;
    return 0;
}

4.  Demonstrate binary operator overloading ( using friend function)

#include<iostream>
using namespace std;
class Student{
    public:
    int roll_no;
    Student (int roll_no){
        this-> roll_no = roll_no;
    }
    friend Student operator+(Student& s1, Student& s2);

};
Student operator+(Student& s1, Student& s2){
    int total = s1.roll_no + s2.roll_no;
    return Student(total);

}
int main(){
    Student s1(24), s2(1);
    Student s3 = s1 + s2;
    cout<<"New roll_no = "<<s3.roll_no<<endl;
}


5. Demonstrate insertion operator overloading 

	#include<iostream>
using namespace std;

   class book{
public:
	string title;
	string author;
 book(string title, string author){
 	this->title = title;
 	this->author = author;
 }
 friend ostream& operator << (ostream& o,book& b);
   };
   ostream& operator << (ostream&o, book&b){
   	o << "title="<<b.title << endl;
   	o << "author="<<b.author << endl;
return o ;
   }
   int main(){
   	book b("Harrypotter","J.K.Rowling");
   	
   	cout << b << "hello" << endl;
return 0;
   }

6. Demonstrate extraction operator overloading 
	
	#include<iostream>
using namespace std;

   class book{
public:
	string title;
	string author;
  friend istream& operator >> (istream& i, book& b);
   };
istream& operator >> (istream& i, book& b){
	cout <<"enter book title"<< endl;
	i >> b.title;
	cout << "enter book author"<< endl;
	i >> b.author;
 return i;
}
int main(){
	book b;
	cin >> b;
  
  cout << "book title=" << b.title << endl;
  cout << "book author=" <<b.author << endl; 
  
  return 0;
}


7. Wap to demonstrate basic to user- defined type conversion

#include<iostream>
using namespace std;

class time{
private:
	int year;
	int month;
	
public:
	time(int y, int m){
		year = y;
		month = m;
	}
	time(float t){
		year = int(t);
		month = 12*(t - year);
		
	}
	
	void displaydetails(){
		cout << "the information is given below:" << endl;
		cout << "year:" << year << endl;
	}
};

int main(){
	float d;
	cout <<"enter date:";
	cin >> d;
	time t=d;
	t.displaydetails();
	return 0;
}


8. Wap to demonstrate user- defined to basic type conversion

#include<iostream>
using namespace std;
class Animal{
    public: 
    int age;
    Animal(int age){
        this->age = age;
    }
    operator int(){
        return age;
    }
};
int main(){
    Animal a(7);
    int age = a;
    cout<<"Age ="<<age<<endl;
    return 0;
}

9. Wap to demonstrate user- defined to user defined data type conversion 
a) Implicit Conversion
#include <iostream>
using namespace std;
class Celsius {
private:
    float temperature;
public:
    Celsius(float temp) : temperature(temp) {}

    // Implicit conversion to Fahrenheit
    operator float() const {
        return (temperature * 9/5) + 32;
    }
};

int main() {
    Celsius tempC(25.0);
    float tempF = tempC; // Implicit conversion

    cout << "Temperature in Celsius: " << tempC << "째C" << endl;
    cout << "Temperature in Fahrenheit: " << tempF << "째F" << endl;

    return 0;
}

	

b) Explicit Conversion
#include <iostream>
using namespace std;
class Fahrenheit {
private:
    float temperature;
public:
    Fahrenheit(float temp) : temperature(temp) {}

    // Explicit conversion to Celsius
    float toCelsius() const {
        return (temperature - 32) * 5.0 / 9.0;
    }

    // Overload the << operator to print Fahrenheit temperatures
    friend ostream& operator<<(ostream& os, const Fahrenheit& f) {
        os << f.temperature;
        return os;
    }
};

int main() {
    Fahrenheit tempF(77.0);
    float tempC = tempF.toCelsius(); // Explicit conversion

    cout << "Temperature in Fahrenheit: " << tempF << "째F" << endl;
    cout << "Temperature in Celsius: " << tempC << "째C" << endl;

    return 0;
}

lab 3:

1.	Write a C++ program to add two numbers using single inheritance. Accept these two numbers from the user in base class and display the sum of these two numbers in derived class.
	
	#include<iostream>
	using namespace std;
	class Base{
   	 public:
  	 int num1,num2;
   	 void input(){
       		 cout<<"enter the first number";
       		 cin>>num1;
       		 cout<<"enter the second number";
       		 cin>>num2;
   		 }
	};
	class Derieved : public Base{
    	public:
   	 void displaySum(){
       	 int sum = num1 + num2;
        	cout<<"the sum of" << num1 << "and" << num2 << "is" << sum << endl;
    		}
	};
	int main(){
   	 Derieved obj;
    	obj.input(); 
   	 obj.displaySum();
    	return 0;
	} 

2.	Write a C++ program to calculate the percentage of a student using multi-level inheritance. Accept the marks of three subjects in base class. A class will derived from the above mentioned class which includes a function to find the total marks obtained and another class derived from this class which calculates and displays the percentage of student.

      #include <iostream>
using namespace std;

class Base {
public:
    float Sub1, Sub2, Sub3;
    
    void inputMarks() {
        cout << "Enter marks for Sub1: ";
        cin >> Sub1;
        cout << "Enter marks for Sub2: ";
        cin >> Sub2;
        cout << "Enter marks for Sub3: ";
        cin >> Sub3;
    }
};

class TotalMarks : public Base {
protected:
    float TotalMarks;
    
    void calculateTotal() {
        TotalMarks = Sub1 + Sub2 + Sub3;
    }
};

class Percentage : public TotalMarks {
public:
    void displayPercentage() {
        // Calculate total marks before displaying percentage
        calculateTotal();
        
        float percentage = (TotalMarks / 300) * 100; // Assuming total marks are out of 300
        cout << "Total marks: " << TotalMarks << endl;
        cout << "Percentage: " << percentage << "%" << endl; 
    }
};

int main() {
    Percentage student;
    student.inputMarks();
    student.displayPercentage();
    return 0;
}

3.	Write a C++ program to demonstrate how a common friend function can be used to exchange the private values of two classes. (Use call by reference method).

#include<iostream>
using namespace std;
class ClassB;
class ClassA{
    public:
    int valueA;
    ClassA(int val):valueA(val){}
    friend void exchangeValvues(ClassA &a, ClassB &b);

    void display()const{
        cout<<"value in classA:" <<valueA <<endl;
    }
};
class ClassB{
    public:
    int valueB;
    public:
    ClassB(int val) : valueB(val){}
    friend void exchangeValues(ClassA &a, ClassB &b);
    void display()const{
        cout<<"value in ClassB:"<< valueB << endl;
    }
};
void exchangeValues(ClassA &a, ClassB &b){
    int temp= a.valueA;
    a.valueA= b.valueB;
    b.valueB= temp;
}
int main(){
ClassA objA(10);
ClassB objB(20);
cout<<"Before swapping :"<<endl;
objA.display();
objB.display();
exchangeValues(objA,objB);
cout<<"\n After swapping :"<<endl;
objA.display();
objB.display();
    return 0;
}

4.	Write a program to demonstrate ambiguity in multiple inheritance. Also show the ways to solve it using an example.

#include <iostream>
using namespace std;

// Base class A
class A {
public:
    void func() {
        cout << " I am in class A" << endl;
    }
};

// Base class B
class B {
public:
    void func() {
        cout << " I am in class B" << endl;
    }
};

// Derived class C
class C : public A, public B {
};

int main() {
    C obj;
    obj.A::func();
    obj.B::func(); 

    return 0;
}

5. 	WAP to demonstrate constructor in derived class

#include <iostream>
using namespace std;
class Base {
public:
    Base() {
        cout<< "Base constructor called" <<endl;
    }
};

class Derived : public Base {
public:
    Derived() {
    cout << "Derived constructor called" <<endl;
    }
};

int main() {
    Derived d;
    return 0;
}

6.	WAP to demonstrate destructor in derived class

#include <iostream>
using namespace std;
class Base {
public:
    ~Base() {
        cout << "Base destructor called" <<endl;
    }
};

class Derived : public Base {
public:
    ~Derived() {
        cout << "Derived destructor called" <<endl;
    }
};

int main() {
    Derived d;
    return 0;
}

7. 	WAP to demonstrate aggregation (i.e Person has a car)where person has member as 	name, age and Car has member brand, cc. Display the person information along with 	his/her car details using a member function defined in a person class.
#include <iostream>
#include <string>
using namespace std;
class Car {
    public:
    string brand;
    Car (const string& brand):brand(brand){}
};
class Person{
    public:
    string name;
    Car c;
    Person(const string& name,const Car& c):name(name),c(c){}
    void display()const{
        cout << name << "has a" << c.brand <<endl;
    }
};
int main() {
    Car c("Porsche");
    Person p("Reetu", c);
    p.display();
    return 0;
}

lab 4:

1.	Write a C++ program that demonstrates the concept of polymorphism using virtual functions. Create a base class Shape with a virtual function area(). Create two derived classes, Circle and Rectangle, each with their own implementation of the area() function. Calculate and display the area of different shapes using polymorphism.

#include<iostream>
using namespace std;
class Shape{
    public:
    virtual double calculateArea(){
        return 0;
    }
};
class Circle : public Shape{
    public:
    double calculateArea(){
        return 60.0;
    }
};
class Rectangle : public Shape{
    public:
    double calculateArea(){
        return 70.0;
    }
};
int main(){
    Shape *circle = new Circle();
    Shape *rectangle = new Rectangle();
    cout<<"Area of circle is" << circle ->  calculateArea()<<endl;
    cout<<"Area of rectangle is" << rectangle -> calculateArea()<<endl;

    return 0;
}

2.	Create an abstract base class Vehicle with a pure virtual function void start(). Derive two classes, Car and Motorcycle, from Vehicle. Implement the start() function differently in each derived class. Write a program to create objects of both Car and Motorcycle and call their start() functions.

#include<iostream> 
using namespace std; 
class Vehicle{ 
    public: 
    virtual void start() = 0 ; 
}; 
class Car:public Vehicle{ 
    public: 
    void start()override{ 
        cout<<"Car is starting"<<endl; 
    } 
}; 
class Motorcycle: public Vehicle{ 
    public: 
    void start()override{ 
        cout<<"Motorcycle is starting"<<endl; 
    } 
}; 
int main(){ 
    Vehicle *vehicle1 = new Car; 
    Vehicle *vehicle2 = new Motorcycle; 
    vehicle1 -> start(); 
    vehicle2 -> start(); 
 
    delete vehicle1; 
    delete vehicle2; 
 
    return 0; 
}

3.	Write a program that defines an abstract base class Animal with a pure virtual function void speak(). Create two derived classes, Dog and Cat, which implement the speak() function. Use an array of Animal pointers to store instances of both Dog and Cat. Write a loop to make all animals in the array speak.

#include<iostream> 
using namespace std; 
class Animal{ 
    public: 
    virtual void speak(){ 
        cout<<"Animal is speaking"<<endl; 
    } 
}; 
class Cat:public Animal{ 
    public: 
    void speak(){ 
        cout<<"Cat is meowing"<<endl; 
    }     
}; 
class Dog:public Animal{ 
    public: 
    void speak(){ 
        cout<<"Dog is barking"<<endl; 
    } 
}; 
int main(){ 
    Animal *ptr[2]; 
    ptr[0] = new Dog(); 
    ptr[1] = new Cat(); 
    for( int i=0; i<2; i++){ 
        ptr[i] -> speak(); 
    }  
    //for cleainig up dynamically allocated memory 
    for(int i = 0; i<2; i++){ 
        delete ptr[i]; 
    } 
    return 0; 
}

4.	Create a C++ program that models a simple banking system. Implement a base class Account and derived classes SavingsAccount and CheckingAccount. Use virtual functions to perform operations like deposit, withdrawal, and interest calculation.

#include<iostream>
using namespace std;
class Account{
    public:
    int amount;
    int interest;
    virtual void deposit(int x){
    }
    virtual void withdraw(int x){
    }
    virtual void callinterest( int x){
    }
};
class SavingAccount: public Account{
    public:
    SavingAccount(int a,int i){
        amount=a;
        interest=i;
    }
    void deposit(int depo){
        cout<<"The current balance is "<< amount<< endl;
        amount=amount+depo;
        cout<<"The new balance is "<< amount<< endl;
    }
    void withdraw(int with){
        if (with>amount){
            cout<<"Insufficient balance."<< endl;
        }
        else {
            amount=amount-with;
            cout<<"withdrawing : "<<with<<endl;
            cout<<"The remaining balance is "<<amount<<endl;
        }
    }
    void callinterest(){
            int amount1=interest/100*amount;
            cout<<"The obtained interest is "<<amount1<<endl;
    }
};
class CheckingAccount :public Account{
    public:
    CheckingAccount(int a,int i){
        amount=a;
        interest=i;
    }
    void deposit(int depo){
        cout<<"The current balance is "<<amount<<endl;
        amount=amount+depo;
        cout<<"The new balance is  "<<amount<<endl;
    }
    void withdraw(int with){
        if(with>amount){
            cout<<"Insufficient balance."<<endl;
        }
        else{
            amount=amount-with;
            cout<<"withdrawing "<<with<<endl;
            cout<<"The remaining balance is "<<amount<<endl;
        }
    }
    void callinterest(){
        int amount2=interest/100*amount;
        cout<<"The obtained interest is "<<amount2<<endl;
    }
};
int main(){
    Account*A1=new SavingAccount(80000,5);
    Account*A2=new CheckingAccount(9000,5);
    A1->deposit(80000);
    A2->deposit(9000);
}

lab 5:

1. Write function template called swapValues() that swaps the values of two variables of any data type. Demostrate swapValues() on both integer and string data types.

#include <iostream>
using namespace std;

template<typename T>
void swapValues(T* a, T* b) {
    T temp = *a;
    *a = *b;
    *b = temp;
}

int main() {
    int a = 5;
    int b = 6;
    swapValues(&a, &b);
    cout << "a: " << a << " b: " << b << endl; 

    string fName = "Cristiano";
    string lName = "Ronaldo";
    swapValues(&fName, &lName);
    cout << "fName: " << fName << " lName: " << lName << endl; 

    return 0;
}

2.Write an overloaded template function maximum () that finds the maximum of two values. Implement versions for both integer and character types.

#include<iostream>
using namespace std;
template <typename T>

void maximum(T a, T b){
    if(a>b){
        cout << "maximum is" << a <<endl;
    }else{
        if(b>a);
        cout << "maximum is" << b <<endl;
    }
}
int main(){
    maximum(14,7);
    maximum(string("a"),string("b"));
    return 0;
}


3. Write a c++ program to demonstrate the addition of multiple data types using function templates. 

#include<iostream>
using namespace std;
template<typename T>
void Sum (T a,T b){
    T s = a+b;
    cout<<"Sum ="<<s<<endl;
}
int main(){
    Sum(6,7);
    Sum(7.8, 6.4);
    Sum(string("Cristiano"), string("Ronaldo"));
return 0;
}

4. Define a class template Stack that can hold elements of any data type. Implement functions to push, pop and display elements from the stack using function templates.

#include <iostream>
using namespace std;

class Stack {
public:
    int arr[5];
    int flag = -1;
    void push(int value) {
        if (flag < 4) {
            flag++;
            arr[flag] = value;
        } else {
            cout << "Stack is full" << endl;
        }
    }
	void pop() {
        if (flag == -1) {
            cout << "Stack is empty" << endl;
        } else {
            cout << arr[flag] << " element is being popped out" << endl;
            flag--;
        }
    }
	void display() {
                for (int i = 0; i <= flag; i++) {
                cout << arr[i] << endl;  
            }
        }
 };
int main() {
    Stack s;
    s.push(6);
    s.push(7);
    s.push(11);
    s.pop();
    s.display();
    return 0;
}

Lab 6:

1. WAP to demonstrate try, throw and catch statement.

#include<iostream>
using namespace std;
int main()
{
    try
    {
        int a,b;
        cout << "Enter first number:";
        cin >> a;
        cout << "Enter second number:";
        cin >> b;
        if ( b == 0){
            throw runtime_error("Number can't be divisible by 2.");
        }
        double result = a / b;
        cout << "The result is:" << result << endl;
    }
    catch(runtime_error e)
    {
        cout << e.what() << endl;
    }    
    return 0;
}


2. WAP to accept an email address and throw an exception if it does not contain @ symbol.

#include<iostream>
using namespace std;
int main()
{
    try
    {
        string email;
        cout<< "Enter email: ";
        cin >> email;
        bool emailValid = false;
        for(int i=0; i < email.length(); i++){
            if(email[i] == '@'){
                emailValid = true;
                break;
            }
        }
        if(!emailValid){
            throw runtime_error("Email is invalid.");
        }
        cout << "Email is valid." << endl;
    }
    catch(runtime_error e)
    {
        cout<< e.what() << endl;
    }
    return 0;
}



3. WAP to perform arithmetic operations on two numbers and throw an exception if the dividend is zero or does not 
//  contain an operator
#include <iostream>
using namespace std;
int main() {
        double a, b;
        char op;
        cout << "Enter the first number: ";
        cin >> a;
        cout << "Enter the second number: ";
        cin >> b;
    try {
        cout << "Enter an operator : ";
        cin >> op;
        if (op != '+' && op != '-' && op != '*' && op != '/') {
            throw runtime_error("Invalid operator.");
        }
        if (op == '/' && b == 0) {
            throw runtime_error("Division by zero is not allowed.");
        }
        double result;
        switch (op) {
            case '+':
                result = a + b;
                break;
            case '-':
                result = a - b;
                break;
            case '*':
                result = a * b;
                break;
            case '/':
                result = a / b;
                break;
        }
        cout << "The result is : " << result << endl;
    } catch (runtime_error e) {
       cout << "Exception : " << e.what() << endl;
    }
    return 0;
}


4. WAP to accept user name and password and throw an exception if the password 
//  has less than 6 characters or does not contain a digit.

#include<iostream>
#include<cctype>
using namespace std;
int main()
{
    try
    {
        string username, password;
        cout << "Enter username:";
        cin >> username;
        cout << "Enter password:";
        cin >> password;
        if (password.length() < 6){
            throw runtime_error("Password must be at least 6 character length.");
        }
        bool containDigit = false;
        for (int i=0; i< password.length(); i++){
            if(isdigit(password[i])){
                containDigit = true;
                break;
            }
        }
        if(!containDigit){
            throw runtime_error ("Password must contain at least one digit.");
        }
        cout << "Password is Correct." << endl;

    }
    catch(runtime_error e)
    {
        cout << e.what()<< endl;
    }
 return 0;
}



5. WAP that attempts to open a file named "input.txt" for reading. Use exception handling to catch and handle 
// the case when the file does not exist

#include <iostream>
#include <fstream>
using namespace std;
int main() {    
    string filename = "input.txt";
    cout<<"Filename : "<<filename<<endl;
    ifstream file(filename);
    try {
        if (!file.is_open()) {
            throw runtime_error("File does not exist or can't be opened.");
}
        cout << "File opened successfully." << endl;
        string line;
        while (getline(file, line)) {
            cout << line << endl;
        }
        file.close();

    } catch (const runtime_error& e) {
        cout <<"Exception : "<< e.what() << endl;
    }
    return 0;
}

6. Write a template function that operates on different types. Use exception handling within the 
// template function to handle exceptions specific to each data type.
#include <iostream>
using namespace std;
template <class T>
T Divide(T a, T b) {
    try {
        if (b == 0) {
            throw runtime_error("Number cannot be divisible by zero.");
        }
        return a / b;
    } catch (runtime_error e) {
        cout << "Exception : " << e.what() << endl;
        return 0;
    }
}
int main() {
    int result1 = Divide(10, 5);
    cout << "Division of integer is : " << result1 << endl; 
    int result2 = Divide(10, 0); 
    // cout << "Division of integer is : " << result2 << endl;
    double result3 = Divide(20.5, 4.5);
    cout << "Division of float datatype is : " << result3 << endl;
    return 0;
}

Lab 7:

1. 
1) WAP to create file named student-records.txt and insert contents to it.
Content:
1 Ram 30
2 Shyam 29
3 Sita 25

#include <iostream>
#include <fstream> 
using namespace std;

int main() {
    const char* filename = "student_records.txt";
    ofstream file(filename);
    if (!file) {
        cerr << "Error: Could not open file " << filename <<endl;
        return 1;
    }
    file << "1 Ram 30\n";
    file << "2 Shyam 29\n";
    file << "3 Sita 25\n";

    // Close the file
    file.close();

    std::cout << "File '" << filename << "' created and content inserted." << std::endl;

    return 0;
}

2) WAP to read contents and display in console from the file student_records.txt.

#include <iostream>
#include <fstream>  // For file operations
#include <string>   // For std::string and std::getline

int main() {
    // Define the name of the file
    const char* filename = "student_records.txt";

    // Create an input file stream object
    std::ifstream file(filename);

    // Check if the file was successfully opened
    if (!file) {
        std::cerr << "Error: Could not open file " << filename << std::endl;
        return 1; // Return an error code
    }

    // Read and display the contents of the file
    std::string line;
    while (std::getline(file, line)) {
        std::cout << line << std::endl;
    }

    // Close the file
    file.close();

    return 0; // Indicate successful completion
}

3) WAP to modify the  age of Shyam from 29 to 22 that is available in the file stude_records.txt.

#include <iostream>
#include <fstream>
#include <sstream>  // Include for std::istringstream
#include <string>
#include <cstdio>   // Include for std::remove and std::rename

void modifyStudentAge(const std::string& filename, const std::string& name, int newAge) {
    std::ifstream fileIn(filename); // Open the original file for reading
    if (!fileIn) {
        std::cerr << "Error: Could not open file " << filename << std::endl;
        return;
    }

    std::ofstream tempFile("temp.txt"); // Create a temporary file for writing
    if (!tempFile) {
        std::cerr << "Error: Could not create temporary file" << std::endl;
        fileIn.close();
        return;
    }

    std::string line;
    while (std::getline(fileIn, line)) {
        std::istringstream lineStream(line);
        std::string id, studentName;
        int age;

        if (lineStream >> id >> studentName >> age) {
            if (studentName == name) {
                age = newAge; // Update the age for the specified student
            }
            // Write the line to the temporary file
            tempFile << id << " " << studentName << " " << age << std::endl;
        }
    }

    fileIn.close();  // Close the original file
    tempFile.close(); // Close the temporary file

    // Replace the original file with the modified temporary file
    if (std::remove(filename.c_str()) != 0) {
        std::cerr << "Error: Could not delete the original file" << std::endl;
        return;
    }
    if (std::rename("temp.txt", filename.c_str()) != 0) {
        std::cerr << "Error: Could not rename the temporary file" << std::endl;
        return;
    }

    std::cout << "Age of " << name << " modified to " << newAge << " in file " << filename << std::endl;
}

int main() {
    // Define the filename, student name, and new age
    const std::string filename = "student_records.txt";
    const std::string studentName = "Shyam";
    const int newAge = 22;

    // Modify the age
    modifyStudentAge(filename, studentName, newAge);

    return 0;
}

4)WAP to delete record of sita from file student_recors.txt and display remaining rows.

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <cstdio> // For std::remove and std::rename

void deleteStudentRecord(const std::string& filename, const std::string& name) {
    std::ifstream fileIn(filename); // Open the original file for reading
    if (!fileIn) {
        std::cerr << "Error: Could not open file " << filename << std::endl;
        return;
    }

    std::ofstream tempFile("temp.txt"); // Create a temporary file for writing
    if (!tempFile) {
        std::cerr << "Error: Could not create temporary file" << std::endl;
        return;
    }

    std::string line;
    while (std::getline(fileIn, line)) {
        std::istringstream lineStream(line);
        std::string id, studentName;
        int age;

        if (lineStream >> id >> studentName >> age) {
            // Only write the line to the temporary file if it's not the record to delete
            if (studentName != name) {
                tempFile << id << " " << studentName << " " << age << std::endl;
            }
        }
    }

    fileIn.close();  // Close the original file
    tempFile.close(); // Close the temporary file

    // Replace the original file with the modified temporary file
    if (std::remove(filename.c_str()) != 0) {
        std::cerr << "Error: Could not delete the original file" << std::endl;
        return;
    }
    if (std::rename("temp.txt", filename.c_str()) != 0) {
        std::cerr << "Error: Could not rename the temporary file" << std::endl;
        return;
    }

    // Display the remaining rows
    std::ifstream updatedFile(filename);
    if (!updatedFile) {
        std::cerr << "Error: Could not open updated file " << filename << std::endl;
        return;
    }

    std::cout << "Remaining records in " << filename << ":\n";
    while (std::getline(updatedFile, line)) {
        std::cout << line << std::endl;
    }

    updatedFile.close();
}

int main() {
    // Define the filename and student name to delete
    const std::string filename = "student_records.txt";
    const std::string studentName = "Sita";

    // Delete the record and display remaining records
    deleteStudentRecord(filename, studentName);

    return 0;
}

5)WAP to append content in the file named demo.txt.

#include <iostream>
#include <fstream>  // For file operations
#include <string>

void appendToFile(const std::string& filename, const std::string& content) {
    // Open the file in append mode
    std::ofstream fileOut(filename, std::ios::app);
    
    // Check if the file was successfully opened
    if (!fileOut) {
        std::cerr << "Error: Could not open file " << filename << std::endl;
        return;
    }

    // Write the content to the file
    fileOut << content << std::endl;

    // Close the file
    fileOut.close();

    std::cout << "Content appended to " << filename << std::endl;
}

int main() {
    // Define the filename and content to append
    const std::string filename = "demo.txt";
    const std::string content = "This is the new content to append.";

    // Append content to the file
    appendToFile(filename, content);

    return 0;
}

6)WAP to read contents from file named demo.txt and print number of characters available in that file.

#include <iostream>
#include <fstream>  // For file operations
#include <string>

int countCharactersInFile(const std::string& filename) {
    std::ifstream fileIn(filename); // Open the file for reading
    if (!fileIn) {
        std::cerr << "Error: Could not open file " << filename << std::endl;
        return -1; // Return an error code
    }

    int charCount = 0;
    char ch;
    // Read the file character by character
    while (fileIn.get(ch)) {
        ++charCount; // Increment character count
    }

    fileIn.close(); // Close the file
    return charCount;
}

int main() {
    // Define the filename
    const std::string filename = "demo.txt";

    // Count characters in the file
    int charCount = countCharactersInFile(filename);

    if (charCount != -1) {
        std::cout << "Number of characters in " << filename << ": " << charCount << std::endl;
    }

    return 0;
}

7)WAP to read contents from file named demo.txt and print number of words and number of lines available in that text.

#include <iostream>
#include <fstream>  // For file operations
#include <sstream>  // For std::istringstream
#include <string>

void countLinesAndWords(const std::string& filename, int& numLines, int& numWords) {
    std::ifstream fileIn(filename); // Open the file for reading
    if (!fileIn) {
        std::cerr << "Error: Could not open file " << filename << std::endl;
        return;
    }

    numLines = 0;
    numWords = 0;
    std::string line;

    // Read the file line by line
    while (std::getline(fileIn, line)) {
        ++numLines; // Increment line count
        
        // Use a string stream to count words in the current line
        std::istringstream lineStream(line);
        std::string word;
        while (lineStream >> word) {
            ++numWords; // Increment word count
        }
    }

    fileIn.close(); // Close the file
}

int main() {
    // Define the filename
    const std::string filename = "demo.txt";
    
    // Variables to store the number of lines and words
    int numLines = 0;
    int numWords = 0;

    // Count lines and words in the file
    countLinesAndWords(filename, numLines, numWords);

    // Print the results
    std::cout << "Number of lines in " << filename << ": " << numLines << std::endl;
    std::cout << "Number of words in " << filename << ": " << numWords << std::endl;

    return 0;
}

8. WAP to create two files named file1.txt and file2.txt with some text in those files .Also merge the content of those two files into the file named file3.txt.
#include <iostream>
#include <fstream>  // For file operations
#include <string>

// Function to create a file with some text
void createFile(const std::string& filename, const std::string& content) {
    std::ofstream fileOut(filename);
    if (!fileOut) {
        std::cerr << "Error: Could not create file " << filename << std::endl;
        return;
    }
    fileOut << content;
    fileOut.close();
}

// Function to merge two files into a third file
void mergeFiles(const std::string& file1, const std::string& file2, const std::string& outputFile) {
    std::ifstream fileIn1(file1);
    if (!fileIn1) {
        std::cerr << "Error: Could not open file " << file1 << std::endl;
        return;
    }

    std::ifstream fileIn2(file2);
    if (!fileIn2) {
        std::cerr << "Error: Could not open file " << file2 << std::endl;
        return;
    }

    std::ofstream fileOut(outputFile);
    if (!fileOut) {
        std::cerr << "Error: Could not create file " << outputFile << std::endl;
        return;
    }

    // Copy contents of file1 to file3
    std::string line;
    while (std::getline(fileIn1, line)) {
        fileOut << line << std::endl;
    }
    fileIn1.close();

    // Copy contents of file2 to file3
    while (std::getline(fileIn2, line)) {
        fileOut << line << std::endl;
    }
    fileIn2.close();

    fileOut.close();
    std::cout << "Files merged into " << outputFile << std::endl;
}

int main() {
    // Create files with some text
    createFile("file1.txt", "This is the content of file1.");
    createFile("file2.txt", "This is the content of file2.");

    // Merge the two files into file3.txt
    mergeFiles("file1.txt", "file2.txt", "file3.txt");

    return 0;
}

